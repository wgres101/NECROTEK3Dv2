package Central;

  


import com.jogamp.common.nio.Buffers;
import com.jogamp.opengl.GL;
import com.jogamp.opengl.GL2;
import com.jogamp.opengl.GL2ES2;
import com.jogamp.opengl.GL4;
import com.jogamp.opengl.GLAutoDrawable;
import com.jogamp.opengl.GLDrawable;
import com.jogamp.opengl.math.FloatUtil;
import com.jogamp.opengl.util.GLBuffers;
import com.jogamp.opengl.util.glsl.ShaderCode;
import com.jogamp.opengl.util.glsl.ShaderProgram;

import framework.BufferUtils;
import framework.Semantic;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.StringTokenizer;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.nio.ShortBuffer;
	 
	 
	public class GLRenderer  {
		/* DATA */
		
		private final String SHADERS_ROOT = "src/gl4/helloTriangle/shaders";
	    private final String SHADERS_NAME = "hello-triangle";

	    private int vertexCount = 3;
	    private int vertexSize = vertexCount * 5 * Float.BYTES;
	    private float[] vertexData = new float[]{
	        -1, -1,/**/ 1, 0, 0,
	        +0, +2,/**/ 0, 0, 1,
	        +1, -1,/**/ 0, 1, 0
	    };

	    private int elementCount = 3;
	    private int elementSize = elementCount * Short.BYTES;
	    private short[] elementData = new short[]{
	        0, 2, 1
	    };

	    
	    private static class Buffer {

	        public static final int VERTEX = 0;
	        public static final int ELEMENT = 1;
	        public static final int TRANSFORM = 2;
	        public static final int MAX = 3;
	    }

	    /**
	     * Use pools, you don't want to create and let them cleaned by the garbage
	     * collector continuously in the display() method.
	     */
	    private float[] scale = new float[16], zRotazion = new float[16], modelToClip = new float[16];
	    private long start, now;
	    private IntBuffer bufferName = GLBuffers.newDirectIntBuffer(Buffer.MAX);
	    private IntBuffer vertexArrayName = GLBuffers.newDirectIntBuffer(1);
	    private int programName;
	    private FloatBuffer clearColor = GLBuffers.newDirectFloatBuffer(new float[]{1.0f, 0.5f, 0.0f, 1.0f});
	    private FloatBuffer clearDepth = GLBuffers.newDirectFloatBuffer(new float[]{1.0f});
	    private ByteBuffer transformPointer;
	    /**
	     * https://jogamp.org/bugzilla/show_bug.cgi?id=1287
	     */
	    private boolean bug1287 = true;

	    
	    public void init(GLAutoDrawable drawable) {
	        System.out.println("init");

	        GL4 gl4 = drawable.getGL().getGL4();

	        //initDebug(gl4);

	        initBuffers(gl4);

	        initVertexArray(gl4);

	        initProgram(gl4);
	        
	        // map the transform buffer and keep it mapped
	        transformPointer = gl4.glMapNamedBufferRange(
	                bufferName.get(Buffer.TRANSFORM), // buffer
	                0, // offset
	                16 * Float.BYTES, // size
	                GL4.GL_MAP_WRITE_BIT | GL4.GL_MAP_PERSISTENT_BIT | GL4.GL_MAP_COHERENT_BIT | GL4.GL_MAP_INVALIDATE_BUFFER_BIT); // flags

	        gl4.glEnable(GL4.GL_DEPTH_TEST);

	        start = System.currentTimeMillis();
	    }
	    
	   /* private void initDebug(GL4 gl4) {

	        glWindow.getContext().addGLDebugListener(new GlDebugOutput());
	        // Turn off all the debug
	        gl4.glDebugMessageControl(
	                GL_DONT_CARE, // source
	                GL_DONT_CARE, // type
	                GL_DONT_CARE, // severity
	                0, // count
	                null, // id
	                false); // enabled
	        // Turn on all OpenGL Errors, shader compilation/linking errors, or highly-dangerous undefined behavior 
	        gl4.glDebugMessageControl(
	                GL_DONT_CARE, // source
	                GL_DONT_CARE, // type
	                GL_DEBUG_SEVERITY_HIGH, // severity
	                0, // count
	                null, // id
	                true); // enabled
	        // Turn on all major performance warnings, shader compilation/linking warnings or the use of deprecated functions
	        gl4.glDebugMessageControl(
	                GL_DONT_CARE, // source
	                GL_DONT_CARE, // type
	                GL_DEBUG_SEVERITY_MEDIUM, // severity
	                0, // count
	                null, // id
	                true); // enabled
	    }*/
	    private void initBuffers(GL4 gl4) {

	        FloatBuffer vertexBuffer = GLBuffers.newDirectFloatBuffer(vertexData);
	        ShortBuffer elementBuffer = GLBuffers.newDirectShortBuffer(elementData);

	        gl4.glCreateBuffers(Buffer.MAX, bufferName);

	        if (!bug1287) {

	            gl4.glNamedBufferStorage(bufferName.get(Buffer.VERTEX), vertexBuffer.capacity() * Float.BYTES, vertexBuffer,
	                    GL4.GL_STATIC_DRAW);

	            gl4.glNamedBufferStorage(bufferName.get(Buffer.ELEMENT), elementBuffer.capacity() * Short.BYTES,
	                    elementBuffer, GL4.GL_STATIC_DRAW);

	            gl4.glNamedBufferStorage(bufferName.get(Buffer.TRANSFORM), 16 * Float.BYTES, null, GL4.GL_MAP_WRITE_BIT);

	        } else {
	            // vertices
	            gl4.glBindBuffer(GL4.GL_ARRAY_BUFFER, bufferName.get(Buffer.VERTEX));
	            {
	                gl4.glBufferStorage(GL4.GL_ARRAY_BUFFER, vertexBuffer.capacity() * Float.BYTES, vertexBuffer, 0);
	            }
	            gl4.glBindBuffer(GL4.GL_ARRAY_BUFFER, 0);
	            // elements
	            gl4.glBindBuffer(GL4.GL_ELEMENT_ARRAY_BUFFER, bufferName.get(Buffer.ELEMENT));
	            {
	                gl4.glBufferStorage(GL4.GL_ELEMENT_ARRAY_BUFFER, elementBuffer.capacity() * Short.BYTES, elementBuffer, 0);
	            }
	            gl4.glBindBuffer(GL4.GL_ELEMENT_ARRAY_BUFFER, 0);
	            // transform
	            gl4.glBindBuffer(GL4.GL_UNIFORM_BUFFER, bufferName.get(Buffer.TRANSFORM));
	            {
	                IntBuffer uniformBufferOffset = GLBuffers.newDirectIntBuffer(1);
	                gl4.glGetIntegerv(GL4.GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT, uniformBufferOffset);
	                int uniformBlockSize = Math.max(16 * Float.BYTES, uniformBufferOffset.get(0));

	                gl4.glBufferStorage(GL4.GL_UNIFORM_BUFFER, uniformBlockSize, null, GL4.GL_MAP_WRITE_BIT | GL4.GL_MAP_PERSISTENT_BIT
	                        | GL4.GL_MAP_COHERENT_BIT);

	                BufferUtils.destroyDirectBuffer(uniformBufferOffset);
	            }
	            gl4.glBindBuffer(GL4.GL_UNIFORM_BUFFER, 0);
	        }

	        BufferUtils.destroyDirectBuffer(vertexBuffer);
	        BufferUtils.destroyDirectBuffer(elementBuffer);
	    }
	    
	    private void initVertexArray(GL4 gl4) {

	        gl4.glCreateVertexArrays(1, vertexArrayName);

	        gl4.glVertexArrayAttribBinding(vertexArrayName.get(0), Semantic.Attr.POSITION, Semantic.Stream._0);
	        gl4.glVertexArrayAttribBinding(vertexArrayName.get(0), Semantic.Attr.COLOR, Semantic.Stream._0);

	        gl4.glVertexArrayAttribFormat(vertexArrayName.get(0), Semantic.Attr.POSITION, 2, GL4.GL_FLOAT, false, 0);
	        gl4.glVertexArrayAttribFormat(vertexArrayName.get(0), Semantic.Attr.COLOR, 3, GL4.GL_FLOAT, false, 2 * Float.BYTES);

	        gl4.glEnableVertexArrayAttrib(vertexArrayName.get(0), Semantic.Attr.POSITION);
	        gl4.glEnableVertexArrayAttrib(vertexArrayName.get(0), Semantic.Attr.COLOR);

	        gl4.glVertexArrayElementBuffer(vertexArrayName.get(0), bufferName.get(Buffer.ELEMENT));
	        gl4.glVertexArrayVertexBuffer(vertexArrayName.get(0), Semantic.Stream._0, bufferName.get(Buffer.VERTEX), 0,
	                (3 + 2) * Float.BYTES);
	    }
	    
	    private void initProgram(GL4 gl4) {

	        ShaderCode vertShader = ShaderCode.create(gl4, GL4.GL_VERTEX_SHADER, this.getClass(), SHADERS_ROOT, null,
	                SHADERS_NAME, "vert", null, true);
	        ShaderCode fragShader = ShaderCode.create(gl4, GL4.GL_FRAGMENT_SHADER, this.getClass(), SHADERS_ROOT, null,
	                SHADERS_NAME, "frag", null, true);

	        ShaderProgram shaderProgram = new ShaderProgram();
	        shaderProgram.add(vertShader);
	        shaderProgram.add(fragShader);

	        shaderProgram.init(gl4);

	        programName = shaderProgram.program();

	        shaderProgram.link(gl4, System.out);
	    }
	    
	    public void display(GLAutoDrawable drawable) {
//	        System.out.println("display");

	        GL4 gl4 = drawable.getGL().getGL4();

	        gl4.glClearBufferfv(GL4.GL_COLOR, 0, clearColor);
	        gl4.glClearBufferfv(GL4.GL_DEPTH, 0, clearDepth);

	        {
	            // update matrix based on time
	            now = System.currentTimeMillis();
	            float diff = (float) (now - start) / 1000;
	            /**
	             * Here we build the matrix that will multiply our original vertex
	             * positions. We scale, halving it, and rotate it.
	             */
	            scale = FloatUtil.makeScale(scale, true, 0.5f, 0.5f, 0.5f);
	            zRotazion = FloatUtil.makeRotationEuler(zRotazion, 0, 0, 0, diff);
	            modelToClip = FloatUtil.multMatrix(scale, zRotazion);

	            transformPointer.asFloatBuffer().put(modelToClip);
	        }
	        gl4.glUseProgram(programName);
	        gl4.glBindVertexArray(vertexArrayName.get(0));

	        gl4.glBindBufferBase(
	                GL4.GL_UNIFORM_BUFFER, // target
	                Semantic.Uniform.TRANSFORM0, // index 
	                bufferName.get(Buffer.TRANSFORM)); // buffer

	        gl4.glDrawElements(
	                GL4.GL_TRIANGLES, // primitive mode
	                elementCount, // element count
	                GL4.GL_UNSIGNED_SHORT, // element type
	                0); // element offset
	    }
	    public void dispose(GLAutoDrawable drawable) {
	        System.out.println("dispose");

	        GL4 gl4 = drawable.getGL().getGL4();

	        gl4.glUnmapNamedBuffer(bufferName.get(Buffer.TRANSFORM));

	        gl4.glDeleteProgram(programName);
	        gl4.glDeleteVertexArrays(1, vertexArrayName);
	        gl4.glDeleteBuffers(Buffer.MAX, bufferName);

	        BufferUtils.destroyDirectBuffer(vertexArrayName);
	        BufferUtils.destroyDirectBuffer(bufferName);;

	        BufferUtils.destroyDirectBuffer(clearColor);
	        BufferUtils.destroyDirectBuffer(clearDepth);

	        System.exit(0);
	    }
	    public void reshape(GLAutoDrawable drawable, int x, int y, int width, int height) {
	        System.out.println("reshape");
	        GL4 gl4 = drawable.getGL().getGL4();
	        /**
	         * Just the glViewport for this sample, normally here you update your
	         * projection matrix.
	         */
	        gl4.glViewport(x, y, width, height);
	    }
	    
	}
