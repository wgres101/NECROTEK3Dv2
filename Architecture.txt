ARCHITECUTRE AND DESIGN



1) Every object (such as a cube or sphere all the way to a rigidbody component) has its
own WebService and WSObject. The WebService controls all the functionality -that is
the game logic, and WSObject contains the data of an instance of a Web Service.
The Web Services use a WebServiceFactory, a class designed to create instances of objects
You get a WSObject from the service via SpawnServiceObject()


2) Every object has its own place in the scene graph. This includes scripts,
skeletal meshes, nav meshes, AI behaviors, ProjectileMovement objects, 
static meshes, etc. 

3) Every object has a WSObject which translates to a details panel. For example,
I may add a primitie cube with a brick texture. That is added to the scene graph. When 
the scene graph is iterated and reaches the box, it calls the box's primitive's 
web service with a newly created WSObject for the box. SHould the user click on
the box, on the right hand side a panel will appear for the box containing all
the box's variables that can be adjusted (position, texture, m ash type, etc.) in
the inspector

4) Also, when a node is reached on the scene graph, since EVERY implementation of
a node on the scene graph MUST implement three functions: create, update, and destroy,
when the obejct is reached during iteration it will immediately call that object's
Update method. 


5) The Blackboard object is a means for services to comunicate with each other. Important
variables are placed on the blackboard allowing for other services to check their values. The Blackboard
is a means to share variables.

6) Fireable Events: Classes that contain an update() and create() function are considered "fireable events"

7) The AssetHandler: this class is designed to unload objects when they get
out of view and reload them whent hey grow closer
for example, if a resource is more than two hexagons 
away it will be unloaded by the assethotloader. If the
asset approaches and is travelling towards the plauyer,
when it reaches within two hexagonals its data will
be loaded into the game. This yields a neverending
map if desired - if tied in with procedural functinos.
All objects are required to register with the AssetHandler.

8) Blackboard: The blackboard allows a quick way to access foreign variables. All public
variables that span across more than one class are to register with the blackboard manager.

9)BloomFilter - Heavy functions - that is, functions that do a large amount of processing
like the graphics library functions are required to use a bloom filter to prevent needless
repetition of CPU-intensive code

10)Assert - There is a custom assert function which is to be used for EVERY conditional test

11)Debugging - There is a debug manager. All debugging should pass through that

12)Deferred Methods - FOr functions which do not need to be immediately executed, submit them to the
deferred memory manager and they will be called when necessary

13) Web Services - all web service objects are produced from the WebServiceFactory

14) HANDLE - All references that act like pointers, that is, references passed from method
to method, should be wrapped in a HANDLE object. 

15)MessageManager - Services work on messages passed to them, the message manager receives and sends
messages that in queue to to the other services that are runing

so it
a: receives messages from servies
b: puts (stores) messages in a list
c: passes along all messages to all services that are awake (pases messages down the tree of the scenegraph)
d: removes messages from list after complete

The message manager must be used to communicate between web services



16) If available, a registered variable should be used instead of the built in primitives and classes

17) The scheduling manager controls the message manager. Objects are to be s ubmitted to the scheduler
which upon clocktime up the scheduling manager will send the message to the message manager for handling. All operations
go through the scheduler. 

18) Tweaking. Variables that can be changed in-game should have been submitted to the tweaker, which
allows for modification of code during run-time.

19) XML GameMap  //a map described entirely in XML - an entire scenegraph Is used for loading and saving levels

20) 
HUD //uses an overhead plastic approach to UI

21) THe Object Manager -a memory manager that has a set pool of memory for variables. All variables should be initialized
					by pulling from this pool.

22) Resources are a representation of a map as a binary file to save and load

23) NecroTek3D is a message based system. e.g., to draw an entity you send it a message. To let an entity move through the world you
	send it a message.

24) Use the PIMPL design pattern as much as possible. 
Explanation: Two files. One is a private class and another public. The private class funcionality is accessed
by the public class. The public class has a reference to the private class.

25) For debugging purposes, Journaling should be used throughout the engine. 

26) Components are to be used for Services/WSObjects. They and their code should be as self-contained as possible

27) Instead of the typical null, we use null objects. A null object is an object of any object in use in a null case.
	It is there so that there is no crash if an object returns as null, we can implement a custom behavior

28) Share Nothing Approach - Objects should not share with other objects directly

-----------------------------

Scheduler - Distributes it to the message queue
Each service has a parseMessage function that acts on various objects
MessageManagement - holds on to and distributes messages to services
Web Service -Attached to scene graph, iterate through scene graph and
			call Update() and parseMessage()

			
-----------------

Use bloom fliters for complex objects
Use Tweaker to adjust values
Use object maanger to allocate objects
Put globals in Blackboard
]Use web service facetory to spawn webservice and wsobjects
			
			
CODING STANDARDS
=================

1. Camel Case is to be used for all variables, objects, and functions
2. When editing a piece of code, leave a comment with name, date, and the change you made
3. Classes, Interfaces, Abstract Classes, etc. have their own naming convention. See below:
3. Use javadoc as mmuc as possible. Anything that seems vague or may be confusing leave a java doc comment
4. Class names are capitalized/
5. Closing brace of a block (for loop, if-else statement, end of class, end of function) shoudl be marked with the name of the
   calling function:
   public void fubar(int fu) 
   {
   
   ...
   } //end fubar()
   
 6. Braces are to be structured as such:
 
 public void fubar()
 {
 	//some code goes here
 }			
 
 7. Code for a method should not exceed 100 lines. If it does it must be broken up into smaller functions and procedur es
 8. Code for a class should not exceed 200 lines. If so, aggregates and inheritane should be used.
 
 9.All service packages have the word "services" apppended to them. i.e.,  "ParticleSystemServices"
 10. All services have the word "service" appeneded to them. i.e., "LineOfSightService.java"
 11. All "service objects" have the word "WSObject" prepended to them

 12. The programmer is to liberally use the logging class. 


CODING CONVENTIONS
========================
We use a generic version of Hungarian Notatoin:


f 
Flag (Boolean, logical). If qualifier is used, it should describe the true state of the flag. Exception: the constants fTrue and fFalse. 
w 
Word with arbitrary contents. 
ch 
Character, usually in ASCII text. 
b 
Byte, not necessarily holding a coded character, more akin to w. Distinguished from the b constructor by the capital letter of the qualifier in immediately following. 
sz 
Pointer to first character of a zero terminated string. 
st 
Pointer to a string. First byte is the count of characters cch. 
h 
pp (in heap).  

p
Pointer
Finger* pRude;
In most cases, p is combined with another prefix; the prefix of the type of object being pointed to. For example:
String* psName
is a pointer to a string object containing a name.
s
str
String
String sName;
String strName;
This convention is generally used for first-class string classes.
sz
psz
zero-terminated / null-terminated string
char szName[16];
char* pszName;
h
Handle
HWND hWindow
c
Character (char)
char cLetter;
Sometimes c is used to denote a counter object.
by
y
Byte or Unsigned Char
byte byMouthFull;
byte yMouthFull;
n
Integer (int)
int nSizeOfArray;
f
Float
float fRootBeer;
d
Double
double dDecker;
b
Boolean
boolean bIsTrue;
BOOL bIsTrue;
int bIsTrue;
An integer can store a boolean value as long as you remember not to assign it a value other than 0 or 1
u
Unsigned...
w
Word or Unsigned Integer
unsigned int wValue; 
 
l
Long
long lIdentifier;
Sometimes l is appended to p to denote that the pointer is a long. For example:
lpszName
is a long pointer to a zero-terminated string.
dw
Unsigned Long Integer
C
or just a capital first letteri
Class
Class CObject;
Class Object;
C is used heavily in Microsoft's Foundation Classes but using just a capital first letter is emphasized by Microsoft's J++.
I
Interface (ususally a struct or class with only pure virtual methods and no member variables) 
class IMotion {
public:
   virtual void Fly() = 0;
};
Used extensively in COM.
X
Nested Class
class CRocket {
public:
   class XMotion:public IMotion {
   public:
      void Fly();
   } m_xUnknown;
}
Used extensively in COM.
x
Instantiation of a nested class.
class CAirplane {
public:
   class XMotion:public IMotion {
   public:
      void Fly();
   } m_xUnknown;
}
Used extensively in COM.
m_
Class Member Identifiers
class CThing {
private:
   int m_nSize;
};
g_
Global
String* g_psBuffer
Constant globals are usually in all caps. The g_ would denote that a particular global is not a constant.
v
Void (no type)
void* pvObject
In most cases, v will be included with p because it is a common trick to typecast pointers to void pointers.
Top of table 
Type Prefixes for non-common Types
In many cases, you will have identifiers of non-standard types. In this case, it will not do to borrow prefixes from the list of standard prefixes. Instead, the programmer needs to invent his own and, even more importantly, remain consistent with his own notation. To invent a prefix, abreviate the type name in a short and meaningful fashion. If it is not possible to abbreviate and the type name is not too long, you can just use the type name as a prefix.
The Type Prefix will always be entirely lowercase and should reflect the name of the type by abbreviating it distinctively. 
Example: 
Button buttonPushMe; //this is okay, but awkward
Button butPushMe; //a better abreviation for the type prefix
Button bPushMe; //BAD: can be mistaken for a Boolean 

Standard Qualifiers 
Top
The Qualifier portion of the identifier can be anything but should accurately and concisely describe the purpose of the object. There is a set of standard qualifiers for variables used in commonly performed programming tasks.
Qualifier
Explanation
Sav
A temporary from which the value will be restored
Prev
A value that follows one behind a current value in an iteration (eg. linked list node pointer)
Cur
Current value in some iteration
Next
Next value in some iteration
Nil
A special illegal value that is distinguished from all legal values. Typically denotes a certain absense of a legal value.
Min
Smallest legal index in an array or list. Typically zero.
Max
A strict upper limit for legal indexes in an array or list.

